// all-devtool
apply plugin: 'com.android.application'

// apply plugin: 'com.google.gms.google-services'

File javaDocDstDir = file('../javadoc')

android {
    namespace 'com.landenlabs.all_devtool'

    compileSdk rootProject.apiSDK

    defaultConfig {
        applicationId 'com.landenlabs.all_devtool'
        minSdkVersion rootProject.minSDK
        targetSdkVersion rootProject.apiSDK

        versionCode 50626
        versionName '5.06.26'

        // signingConfig signingConfigs.release
        resValue "string", "targetSdkVersion", targetSdkVersion.apiString
        resValue "string", "compileSdkVersion", compileSdkVersion
        resValue "string", "buildToolsVersion", buildToolsVersion

        // Limit languages to following list.
        // resConfigs "en", "es"
    }
    applicationVariants.configureEach { variant ->
        variant.resValue "string", "versionName", "version " + variant.versionName
    }

    signingConfigs {
        release  // populated below
    }

    // Load signing config (does not work for command line builds)
    // println("Setting release=${rootDir}/release.properties")
    if (file("${rootDir}/release.properties").exists()) {
        def props = new Properties()
        props.load(new FileInputStream(file("${rootDir}/release.properties")))
        android.signingConfigs.release.storeFile = file(props.keyStore)
        android.signingConfigs.release.storePassword = props.keyStorePassword
        android.signingConfigs.release.keyAlias = props.keyAlias
        android.signingConfigs.release.keyPassword = props.keyAliasPassword
        println("Setting release to " + signingConfigs.release.storeFile.absolutePath )
    }

    // New value required with Gradle 3.x
    flavorDimensions "std"

    productFlavors {
        legacy {
            dimension = "std"
            resourceConfigurations += ['en', 'xhdpi']
        }
        standard {
            dimension = "std"
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            debuggable false
            jniDebuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            signingConfig signingConfigs.release
            // productFlavors.legacy.signingConfig signingConfigs.release
            // productFlavors.standard.signingConfig signingConfigs.release
            ndk {
                // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
        debug {
            minifyEnabled false
            jniDebuggable true
            debuggable true

            aaptOptions.cruncherEnabled = false
            splits.abi.enable = false
            splits.density.enable = false
        }
    }

    /*  TODO - add -p switch to enable this.
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            // Enable verbose lint reporting during build.
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
    */

    // Generates build warning, but is required to use lamba Java 1.8 features.
    // "Jack is disabled, but one of the plugins you are using supports Java 8 language features."
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'DefaultLocale', 'SimpleDateFormat', 'InflateParams', 'SpUsage', 'UseCompoundDrawables', 'HandlerLeak', 'ViewConstructor', 'SetTextI18n', 'RtlSymmetry', 'RtlHardcoded', 'ContentDescription', 'MissingTranslation', 'ValidFragment', 'UnusedAttribute', 'Convert2Lambda', 'Anonymous2MethodRef', 'SpellCheckingInspection', 'HardcodedText'
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.9.1'

    if (rootProject.apiSDK > 30) {
        implementation 'androidx.appcompat:appcompat:1.6.1'
    } else {
        implementation 'androidx.appcompat:appcompat:1.3.1'
    }
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'

    // Import the Firebase BoM
    //   implementation platform('com.google.firebase:firebase-bom:29.0.4')
    // When using the BoM, don't specify versions in Firebase dependencies
    //   implementation 'com.google.firebase:firebase-analytics'

    // Standard flavor
    // standardImplementation "com.google.android.gms:play-services-auth:20.4.1"
    // standardImplementation "com.google.firebase:firebase-core:19.0.0" // 21.1.1"


    // Legacy flavor
 //   def  legacyPlayServiceVersion = '17.0.0'
 //   legacyImplementation "com.google.android.gms:play-services-auth:$legacyPlayServiceVersion"
 //   legacyImplementation "com.google.firebase:firebase-core:$legacyPlayServiceVersion"

    // implementation "com.google.android.gms:play-services-ads-identifier:18.0.1"
    // implementation "com.google.android.gms:play-services-analytics:18.0.2"
    implementation "com.google.android.gms:play-services-location:21.3.0"
    // implementation "com.google.android.gms:play-services-drive:17.0.0"
    // implementation "com.google.android.gms:play-services-safetynet:$legacyPlayServiceVersion"


    // AppCenter crash reporting
    // https://mvnrepository.com/artifact/com.microsoft.appcenter/appcenter
    def appCenterSdkVersion = '5.0.0'
    // implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    // implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"


    // 3rdparty libraries

    // Memory leaks tool - see main activity to see LeakCanary.install(this.getApplication());
    //debugImplementation "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    //releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    // https://mvnrepository.com/artifact/com.androidplot/androidplot-core
    implementation 'com.androidplot:androidplot-core:1.5.10'
    // https://mvnrepository.com/artifact/net.danlew/android.joda
    implementation 'net.danlew:android.joda:2.12.7'
}

// Rename app
//  {project}-{flavor}-{buildType}.apk -> {parentProject}-{versionNameSuffix}-{buildType}-{versionStr}.apk
//  Ex:
//           app-release.apk -> threadpenalty -release-1.02.3456.apk
//           app-release.aab -> threadpenalty -release-1.4.27.aab
android.applicationVariants.configureEach {
    variant -> variant.outputs.configureEach {
        def ourname = project.parent.name
        def buildType = outputFileName.replaceAll(".*(debug|release).*", '$1')
        def versionStr = versionName.replaceAll("-.*", "")
        def flavor = variant.mergedFlavor.versionNameSuffix.toString().replace("null", "")
        // ext.flavorName = variant.name
        def newNameRoot = "${ourname}${flavor}-${buildType}-${versionStr}"
        outputFileName = "${newNameRoot}.apk"

        // sign{flavor}{buildType}Bundle
        //   Ex: signAppDebugBundle
        def bundleFinalizeTaskName = "sign${variant.name.capitalize()}Bundle"
        tasks.named(bundleFinalizeTaskName) {
            def file = finalBundleFile.asFile.get()
            def finalFile = new File(file.parentFile, "${newNameRoot}.aab")
            finalBundleFile.set(finalFile)
        }
    }
}

// Generate Java doc files
tasks.register('genJavadocs', Javadoc) {
    // outputs.upToDateWhen { false }

    source = project.android.sourceSets.main.java.srcDirs
    destinationDir = javaDocDstDir

    doFirst {
        println "----------Generate JavaDocs-------------"
        println "  Src= " + source.join(",")
        println "  Dst= " + destinationDir.path
        println "----------------------------------------"
    }

    options.linkSource true
    options.addBooleanOption('Xdoclint:none', true)
    options.addBooleanOption('quiet', true)
    options.addBooleanOption('public', true)

    classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)

    classpath += fileTree(dir: "$buildDir/intermediates/exploded-aar/", include: "**/classes.jar")

    failOnError false
    exclude '**/*.xml'
}

tasks.register('listFlavors') {
    description = 'List flavors'
    doLast {
        println("--- Flavors ---")
        /*
        android.productFlavors.all {
            flavor -> println("  " + flavor.name + "\t" + android.defaultConfig.applicationId + flavor.applicationIdSuffix)
        }
         */
        printf("   %-20s %-20s %-40s   %s\n", "--Package--", "--Name--", "--Description/Flavor--", "--isMinified--")
        project.android.applicationVariants.all { variant ->
            // def applicationId = [variant.mergedFlavor.applicationId, variant.buildType.applicationIdSuffix].findAll().join()
            printf("   %-20s %-20s %-40s   %b\n", variant.getApplicationId(), variant.name, variant.description, variant.buildType.isMinifyEnabled())
        }
    }
}

tasks.register('listrepos') {
    description = 'List repositories'
    doLast {
        println " Repositories:"
        project.repositories.each { printf("  %15s %s\n", it.name, it.url) }
    }
}

tasks.register('deepClean' /*, Delete */) {
    description = 'Delete c++ temp files'
    doLast {
        println "Delete ${layout.buildDirectory.get()}"
        delete layout.buildDirectory.get()
        // delete rootProject.buildDir
        // delete "${buildDir}/someFile"
        println "Delete ${projectDir}/.cxx"
        delete "${projectDir}/.cxx"
    }
}