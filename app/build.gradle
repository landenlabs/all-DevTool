apply plugin: 'com.android.application'

// apply plugin: 'com.google.gms.google-services'

File javaDocDstDir = file('../javadoc')

android {

    compileSdkVersion rootProject.apiSDK

    defaultConfig {
        applicationId 'com.landenlabs.all_devtool'
        minSdkVersion rootProject.minSDK
        targetSdkVersion rootProject.apiSDK
        versionCode 40301
        versionName '4.03.01'

        // signingConfig signingConfigs.release
        resValue "string", "targetSdkVersion", targetSdkVersion.apiString
        resValue "string", "compileSdkVersion", compileSdkVersion
        resValue "string", "buildToolsVersion", buildToolsVersion
        resValue "string", "javaVersion", org.gradle.internal.jvm.Jvm.current().javaVersion.toString()
        // resValue "string", "gradleVersion", GradleVersion.current().getVersion()

        // Limit languages to following list.
        // resConfigs "en", "es"

        ndk {
            // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }
    applicationVariants.all { variant ->
        variant.resValue "string", "versionName", "version " + variant.versionName
    }

    signingConfigs {
        release {
            storeFile file('/Users/ldennis/Dropbox/android/keystores/all_devtool.jks')
            // storeFile file('/Users/ldennis/projects/projects-android/keystores/all_devtool.jks')
            storePassword 'Salem2nh-d'
            keyAlias 'all_devtool'
            keyPassword 'Salem2nh-k'
        }
        release
    }

    // Load signing config
    if (file("release.properties").exists()) {
        def props = new Properties()
        props.load(new FileInputStream(rootProject.file("release.properties")))
        android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
        android.signingConfigs.release.storePassword props.keyStorePassword
        android.signingConfigs.release.keyAlias props.keyAlias
        android.signingConfigs.release.keyPassword props.keyAliasPassword
    }

    // New value required with Gradle 3.x
    flavorDimensions "std"

    productFlavors {
        legacy {
            dimension = "std"
            resConfigs('en', 'xhdpi')
        }
        standard {
            dimension = "std"
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            debuggable false
            jniDebuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            signingConfig signingConfigs.release
            // productFlavors.legacy.signingConfig signingConfigs.release
            // productFlavors.standard.signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            jniDebuggable true
            debuggable true

            aaptOptions.cruncherEnabled = false
            splits.abi.enable = false
            splits.density.enable = false

            ndk {
                // Add x86 to support pc emulator.
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'DefaultLocale', 'SimpleDateFormat', 'InflateParams', 'SpUsage',
                'UseCompoundDrawables', 'HandlerLeak', 'ViewConstructor', 'SetTextI18n',
                'RtlSymmetry', 'RtlHardcoded', 'ContentDescription',
                'MissingTranslation', 'ValidFragment', 'UnusedAttribute',
                'Convert2Lambda', 'Anonymous2MethodRef',
                'SpellCheckingInspection',
                'HardcodedText'
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            // Enable verbose lint reporting during build.
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }


    // Generates build warning, but is required to use lamba Java 1.8 features.
    // "Jack is disabled, but one of the plugins you are using supports Java 8 language features."
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    if (rootProject.apiSDK > 30) {
        implementation 'androidx.appcompat:appcompat:1.6.1'
    } else {
        implementation 'androidx.appcompat:appcompat:1.3.1'
    }

    // Import the Firebase BoM
    //   implementation platform('com.google.firebase:firebase-bom:29.0.4')
    // When using the BoM, don't specify versions in Firebase dependencies
    //   implementation 'com.google.firebase:firebase-analytics'

    // Standard flavor
    standardImplementation "com.google.android.gms:play-services-auth:20.4.1"
    standardImplementation "com.google.firebase:firebase-core:21.1.1"

    // Legacy flavor
    def  legacyPlayServiceVersion = '17.0.0'
    legacyImplementation "com.google.android.gms:play-services-auth:$legacyPlayServiceVersion"
    legacyImplementation "com.google.firebase:firebase-core:$legacyPlayServiceVersion"

    implementation "com.google.android.gms:play-services-ads-identifier:18.0.1"
    implementation "com.google.android.gms:play-services-analytics:18.0.2"
    implementation "com.google.android.gms:play-services-location:21.0.1"
    implementation "com.google.android.gms:play-services-drive:17.0.0"
    // implementation "com.google.android.gms:play-services-safetynet:$legacyPlayServiceVersion"


    // AppCenter crash reporting
    // https://mvnrepository.com/artifact/com.microsoft.appcenter/appcenter
    def appCenterSdkVersion = '4.4.5'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"


    // 3rdparty libraries

    // Memory leaks tool - see main activity to see LeakCanary.install(this.getApplication());
    //debugImplementation "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    //releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    // https://mvnrepository.com/artifact/com.androidplot/androidplot-core
    implementation 'com.androidplot:androidplot-core:1.5.9'
    // https://mvnrepository.com/artifact/net.danlew/android.joda
    implementation 'net.danlew:android.joda:2.10.14'
}

// Rename app
android.applicationVariants.all { variant ->
    variant.outputs.all {
        def ourname = project.parent.name
        outputFileName = "$ourname-${variant.name}-${variant.versionName}.apk"
        println "out name= $outputFileName"
    }
}

// Generate Java doc files
task genJavadocs(type: Javadoc) {
    // outputs.upToDateWhen { false }

    source = project.android.sourceSets.main.java.srcDirs
    destinationDir = javaDocDstDir

    doFirst {
        println "----------Generate JavaDocs-------------"
        println "  Src= " + source.join(",")
        println "  Dst= " + destinationDir.path
        println "----------------------------------------"
    }

    options.linkSource true
    options.addBooleanOption('Xdoclint:none', true)
    options.addBooleanOption('quiet', true)
    options.addBooleanOption('public', true)

    classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)

    classpath += fileTree(dir: "$buildDir/intermediates/exploded-aar/", include: "**/classes.jar")

    failOnError false
    exclude '**/*.xml'
}

// New plugin with play services version 15.x.x
// apply plugin: 'com.google.gms.google-services'