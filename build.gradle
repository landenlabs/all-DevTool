// all-devTool
// Top-level build file where you can add configuration options common to all sub-projects/modules.

// Provide configuration used by Gradle for plugins.
buildscript {
    repositories {
        // println "==== Gradle version " + GradleVersion.current().getVersion()
        google()
        mavenCentral()
    }
    dependencies {
        // https://developer.android.com/studio/releases/gradle-plugin?buildsystem=ndk-build#updating-gradle
        // https://mvnrepository.com/artifact/com.android.tools.build/gradle?repo=google
        classpath 'com.android.tools.build:gradle:8.5.2'  // requires wrapper gradle 8.2+

        // Firebase
        classpath 'com.google.gms:google-services:4.4.2'
    }
}

// Get health report on dependencies and annotations, etc
// https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin
// ./gradlew buildHealth
plugins {
    id("com.autonomousapps.dependency-analysis") version "0.52.0"
}

ext {
    apiSDK = 34
    minSDK = 26

    okHttpVersion = "4.10.0"
    // https://square.github.io/okhttp/changelog/
    // https://github.com/square/okhttp/releases
    // https://pangea.weather.com/android/docs/installation
}

File javaDocDstDir= file('javadoc')
File zipDstDir= file('zip')


// Provide configuration to build Android projects.
allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()   // Readonly as of March 31, 2021 - switch to mavenCentral
        // Used for com.halfhp.fig:figlib
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

tasks.register('cleanAll', Delete) {
    dependsOn clean
    description = 'Clean by removing build, javadoc and zip directories'
    // delete rootProject.buildDir

    println "delete " + zipDstDir
    delete zipDstDir

    println "delete " + javaDocDstDir
    delete javaDocDstDir
}

/*
task zipSrc(type: Zip)   {
    outputs.upToDateWhen { false }
    def outDir= zipDstDir.path

    archiveName = "NbcDemoSrc.zip"
    destinationDir = new File(outDir)

    println "----------Zip  JavaSrc-----------------"
    println "  Src= " + projectDir
    println "  Dst= " + outDir + "/" + archiveName
    println "---------------------------------------"

    // classifier = 'src'
    from (projectDir) {
        include 'app/**'
        include 'gradle/**'
        include 'gradle*'
        include 'build.gradle'
        include 'settings.gradle'
        exclude '**?/build'
        exclude '**?/zip'
        exclude '**?/accounts.xml'
        exclude '**?/*.keystore'
    }
}

//   ./gradlew cleanAll build genJavadocs zipFiles
task zipFiles(type: Zip)  {
    // outputs.upToDateWhen { false }
    description = 'Build distribution package'
    group = 'package'

    // dependsOn genJavadocs, zipSrc
    dependsOn zipSrc
    def outDir = zipDstDir.path

    archiveName = "NbcDemoDoc.zip"
    destinationDir = new File(outDir)

    println "----------Zip  JavaDoc-----------------"
    println "  Src= " + javaDocDstDir.path
    println "  Dst= " + outDir + "/" + archiveName
    println "---------------------------------------"

    from(javaDocDstDir.path) {
        include '**'
        exclude '**?/src-html'
    }
}

*/
